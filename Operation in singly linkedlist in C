#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node *link;
} * head;

void createLinkedList(int n)
{
    struct node *temp, *q;
    int data;
    head = (struct node *)malloc(sizeof(struct node));
    if (head == NULL)
    {
        printf("NO SPACE TO ALLOCATE A MEMORY");
        exit(0);
    }
    printf("ENTER THE DATA OF THE NODE 1\n");
    scanf("%d", &data);

    head->data = data;
    head->link = NULL;

    q = head;
    for (int i = 2; i <= n; i++)
    {
        temp = (struct node *)malloc(sizeof(struct node));
        if (temp == NULL)
        {
            printf("NO SPACE TO ALLOCATE A MEMORY");
            break;
        }

        printf("Enter the data of node %d: ", i);
        scanf("%d", &data);

        temp->data = data;
        temp->link = NULL;

        q->link = temp;
        q = q->link;
    }
}

void insertLinkedList_beg(int data)
{
    struct node *temp;
    temp = (struct node *)malloc(sizeof(struct node));
    if (temp == NULL)
    {
        printf("NO SPACE TO ALLOCATE A MEMORY");
    }
    else
    {
        temp->data = data;
        temp->link = head;
        head = temp;
        printf("DATA INSERTED\n");
    }
}

void insertLinkedList_mid(int data, int position)
{
    int i;
    struct node *temp, *q;

    temp = (struct node *)malloc(sizeof(struct node));

    if (temp == NULL)
    {
        printf("Unable to allocate memory.");
    }
    else
    {
        temp->data = data;
        temp->link = NULL;

        q = head;

        for (i = 2; i <= position - 1; i++)
        {
            q = q->link;

            if (q == NULL)
                break;
        }

        if (q != NULL)
        {

            temp->link = q->link;

            q->link = temp;

            printf("DATA INSERTED \n");
        }
        else
        {
            printf("UNABLE TO INSERT DATA AT THE GIVEN POSITION\n");
        }
    }
}
void InsertLinkedList_end(int data)
{
    struct node *temp, *q;
    temp = (struct node *)malloc(sizeof(struct node));
    if (temp == NULL)
    {
        printf("NO SPACE TO ALLOCATE MEMORY");
    }
    else
    {
        temp->data = data;
        temp->link = NULL;
        q = head;
        if (q != NULL && q->link != NULL)
        {
            q = q->link;
        }
        q->link = temp;
        printf("DATA INSERTED \n");
    }
}

void deleteLinkedList_mid(int pos)
{
    struct node *temp, *q;
    if (head == NULL)
    {
        printf("THE LIST IS EMPTY");
    }
    else
    {
        temp = head;
        q = head;
        for (int i = 2; i < pos; i++)
        {
            q = temp;
            temp = temp->link;
            if (temp == NULL)
            {
                break;
            }
        }
        if (temp != NULL)
        {
            if (temp == head)
            {
                head = head->link;
            }
            q->link = temp->link;
            temp->link = NULL;
            free(temp);
            printf("DATA DELETED");
        }
        else
        {
            printf("INVALID LOCATION TO DELETE");
        }
    }
}

void deleteLinkedList_beg()
{
    struct node *temp;
    if (head == NULL)
    {
        printf("THE LIST IS EMPTY");
    }
    else
    {
        temp = head;
        head = head->link;
        printf("THE DELETED DATA IS %d\n", temp->data);
        free(temp);
        printf("DATA DELETED");
    }
}

void deletedLinkedList_end()
{
    struct node *temp, *q;
    if (head == NULL)
    {
        printf("LIST IS EMPTY");
    }
    else
    {
        temp = head;
        q = head;
        while (temp->link != NULL)
        {
            temp = q;
            temp = temp->link;
        }
        if (temp == head)
        {
            head == NULL;
        }
        else
        {
            q->link = NULL;
        }
        printf("DATA DELETED");
    }
}

void reverseLinkedList()
{
    struct node *temp, *q;
    if (head != NULL)
    {
        temp = head;
        q = head->link;
        head = head->link;
        temp->link = NULL;

        while (head != NULL)
        {
            head = head->link;
            q->link = temp;
            temp = q;
            q = head;
        }
        head = temp;
        printf("DATA REVERSED");
    }
}

void linkedListDisplay()
{
    struct node *q;
    q = head;
    while (q != NULL)
    {
        printf("ELEMENTS ARE : %d\n", q->data);
        q = q->link;
    }
}

void line()
{
    int n;
    for (int i = 1; i <= 40; i++)
    {
        printf("_");
    }
    printf("\n");
}

int main()
{

    do
    {
        int n;
        line();
        printf("\n1. CREATE A LIST");
        printf("\n2. DISPLAY THE LIST");
        printf("\n3. INSERT A NODE");
        printf("\n4. DELETE A NODE");
        printf("\n5. REVERSE THE NODE");
        printf("\n6. TERMINATE THE PROGRAM\n");
        line();
        printf("\nENTER YOUR CHOICE :");
        scanf("%d", &n);

        switch (n)
        {
        case 1:
        {
            int a;
            line();
            printf("ENTER THE TOTAL NUMBER OF NODES: ");
            scanf("%d", &a);

            createLinkedList(a);
            line();
            break;
        }
        case 2:
        {
            printf("\nData in the list \n");
            linkedListDisplay();
            line();
            break;
        }
        case 3:
        {
            int data, pos;
            int choice;
            do
            {

                printf("\n1.INSERT AT BEGINING\n");
                printf("\n2.INSERT AT THE MIDDLE");
                printf("\nINSERT AT THE END");
                printf("\n4. TERMINATE THE CODE");
                line();
                printf("\nENTER YOUR CHOICE");
                scanf("%d", &choice);

                switch (choice)
                {
                case 1:
                {
                    printf("\nENTER THE DATA TO BE INSERTED AT THE BEGINNING OF THE LIST: ");
                    scanf("%d", &data);
                    insertLinkedList_beg(data);
                    line();
                    break;
                }
                case 2:
                {
                    printf("nENTER THE DATA TO BE INSERTED AT THE MIDDLE OF THE LIST: ");
                    scanf("%d", &data);
                    printf("ENTER THE POSITION : ");
                    scanf("%d", &pos);
                    insertLinkedList_mid(data, pos);
                    line();
                    break;
                }
                case 3:
                {
                    printf("\nENTER THE DATA TO BE INSERTED AT THE END OF THE LIST: ");
                    scanf("%d", &data);
                    InsertLinkedList_end(data);
                    line();
                    break;
                }
                case 4:
                {
                    line();
                    printf("EXITING\n");
                    line();
                    break;
                }
                }
            } while (choice == 4);
            break;
        }
        case 4:
        {
            int position;
            int choice;
            do
            {

                printf("\n1.DELETE AT BEGINING\n");
                printf("\n2.DELETE AT THE MIDDLE");
                printf("\nDELETE AT THE END");
                printf("\n4. TERMINATE THE CODE");
                line();
                printf("\nENTER YOUR CHOICE");
                scanf("%d", &choice);

                switch (choice)
                {
                case 1:
                {
                    deleteLinkedList_beg();
                    line();
                    break;
                }
                case 2:
                {
                    printf("\nEnter the node position you want to delete: ");
                    scanf("%d", &position);
                    deleteLinkedList_mid(position);
                    printf("\nData in the list \n");
                    linkedListDisplay();
                    line();
                    break;
                }
                case 3:
                {
                    deletedLinkedList_end();
                    line();
                    break;
                }
                case 4:
                {
                    line();
                    printf("EXITING\n");
                    line();

                    break;
                }
                break;
                }

            } while (choice == 4);
            break;
        }
        case 5:
        {
            reverseLinkedList();
            line();
            break;
        }
        case 6:
        {

            line();
            printf("TERMINATE THE PROGRAM\n");
            line();
            exit(0);
            break;
        }
        }
    } while (1);

    return 0;
}
